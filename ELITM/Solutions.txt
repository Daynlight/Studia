--------------- lab1 ---------------

--------------- lab2 ---------------
Zadanie 1.
[1,2,3,4]=[A|B].                A = 1, B = [2,3,4]
[A,B]=[A|C].                    A = A, C = [B]
[W,Z]=[1,2].                    W = 1, Z = 2
[W,Z]=[1,[2]].                  W = 1, Z = [2]
[W,Z]=[1|[2]].                  W = 1, Z = [[2]]
[1,[A],2]=[1,0,2].              Err [A] != 0
[1,2,3]=[1,2|[3]].              true.
[1,2,3]=[1|[2|[3]]].            true.
[[A],B,C]=[[a,b,c],[d,e,f],1].  Err [A] != [a,b,c]
[a,[B]|C]=[Z,[C],1].            Z = a, B = C = [1]
[a,[B]|C]=[Z,[C],[1]].          Z = a, B = C = [[1]]
[a|[b,c]]=[X,Y|Z].              X = a, Y = b, Z = [c]
[a,b|C]=[W|[a,b,c]].            Err b != a

Zadanie 2.
is_list([1,2,3,c,d]).         true
is_list(5).                   false
is_list([5]).                 true

append([b,c,d],[e,f,g,h],X).  X = [b,c,d,e,f,g,h]
append([a],[b],[a,b]).        true
append(L1,L2,[b,c,d]).        L1 = [], L2 = [a,c,d]

member(a,[b,c,[s,a],a]).      true
member(a,[b,c,[s,a]]).        false
member([s,a],[b,c,[s,a]]).    true
member(X,[a,b,c]).            X = a
member(a, X).                 X = [a]

member(Y,[1,2,3,4]).          Y = 1
memberchk(Y,[1,2,3,4]).       Y = 1

nextto(X,Y,[a,c,d,r]).        X = a, Y = c; ...
nextto(w,Y,[q,w,e,r]).        W = q, Y = w; ...
nextto(X,4,[2,3,4,5]).        X = 3

delete([1,2,3,4],4,M).        M = [1, 2, 3]
delete([2,1,2,1,2,1],1,K).    K = [2, 2, 2]

select(1,[2,1,2,1],K).        K = [2, 2, 1]
select(X,[1,2,3],K).          X = 1, K = [2, 3]; ...
select(0,X,[1,2,3,4]).        X = [0, 1, 2, 3, 4]; ...

nth0(2,[a,b,c,d],X).          X = c
nth0(X,[a,b,c,d],2).          false
nth0(X,[a,b,c,d],c).          X = 2

last([1,2,3,4],L).            L = 4
last(X,2).                    X = [2]; X = [_,2]; ...

reverse([1,2,3,4],X).         X = [4, 3, 2, 1]
reverse(Y,[a,b,c,d,e,f]).     Y = [f, e, d, c, b, a]

permutation([1,2,3],L).       L = [1, 2, 3]; L = [2, 1 ,3]; ...
permutation(M,[4,5,6,7]).     M = [4, 5, 6, 7]; M = [4, 5, 7, 6]; ...

sumlist([1,2,3,4],X).         X = 10
sumlist([1,2,3,4],10).        true

numlist(2,8,L).               L = [2,3,4,5,6,7,8]
numlist(-3,5,X).              L = [-3, -2, -1, 0, 1, 2, 3, 4, 5]

length([1,3,4,23,21,8],L).    L = 6
length([a,e,[a],[x,y],l],T).  T = 5

Zadanie 3.
polacz([],L,L).
polacz([X|L1],L2,[X|L3]):-polacz(L1,L2,L3).
polacz([1,2],[a,b],X).
X = [1, 2, a, b]

Zadanie 4.
ostatni([A|[]], A).
ostatni([_|B], C) :- ostatni(B, C).

Zadanie 5.
rosnacy([_]).
rosnacy([A, B]) :-  A =< B.
rosnacy([A, B | C]) :- A =< B, rosnacy([B|C]).

Zadanie 6.
sm([], [], []).
sm([A1|B1], [A2|B2], [C|D]) :- C is A1 + A2, sm(B1, B2, D).

Zadanie 7.
a)
rownea(A, B) :- length(A, L), length(B, L).
b)
rowneb([_], [_]).
rowneb([_|A], [_,B]) :- rowneb(A, B).

--------------- lab3 ---------------
Zadanie 1.
rownelisty([], []).
rownelisty([A|A1], [B|B1]) :- A = B, rownelisty(A1, B1).

Zadanie 2.
przestaw([A|A1], [B|B1]) :- reverse(A1, [AL|AM]), reverse(B1, [BL|BM]), reverse(AM, AMP), reverse(BM, BMP), BMP = AMP, AL = B, BL = A.

Zadanie 3.
a)
sumaa([], 0).
sumaa([A|A1], S) :- sumaa(A1, C), S is A + C.
b)
sumab([_], 0).
sumab([_,A], A).
sumab([_,A|A1], S) :- sumab(A1, C), S is A + C.
c)
sumac([A], A).
sumac([A,_], A).
sumac([A,_|A1], S) :- sumac(A1, C), S is A + C.

Zadanie 4.
ujemne([], 0).
ujemne([A|A1], S) :- ujemne(A1, C), (A<0 -> S is C + 1; S is C).

Zadanie 5.
odwa([],[]).
odwa([A|A1], [B|B1]) :- odwa(A1, B1), B is A + 2.

Zadanie 6.
mnoz(_, [], []).
mnoz(M, [A|A1], [B|B1]) :- mnoz(M, A1, B1), B is A * M.

--------------- lab4 ---------------
Zadanie 1.
suma([],0).
suma([A|B], S) :- suma(B,C), (A > 0 -> S is C + A; S is C).

Zadanie 2.
dwa([A|B], P) :- last(B, C), P = [A, C].

Zadanie 3.
cztery([A1,A2|B], P) :- reverse(B, [C1, C2|_]), P = [A1, A2, C1, C2].

Zadanie 4.
silnia(1, 1).
silnia(A, S) :- N is A - 1, N > 0, silnia(N, C), S is A * C.

Zadanie 5.
wspolne([], _, []).
wspolne([A|A1], B, C) :- wspolne(A1, B, D),(member(A, B) -> C = [A|D]; C = D).

Zadanie 6.
tesameel([_],_).
tesameel([A|A1], B) :- tesameel(A1, B), member(A, B).

Zadanie 7.
maks([A], A).
maks([A|A1], B) :- maks(A1, N),(A > N -> B = A ; B = N).
